{"version":3,"file":"static/js/535.bf7f4247.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Button/Button.module.css?ce6f","components/Button/Button.js","webpack://goit-react-hw-05-movies/./src/components/MoviesGallery/MoviesGallery.module.css?276e","components/MoviesGallery/MoviesGallery.js","webpack://goit-react-hw-05-movies/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.js","pages/Movies/Movies.js","services/moviesApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\",\"button-73\":\"Button_button-73__Z6Ocn\"};","import PropTypes from 'prop-types';\nimport styles from \"../Button/Button.module.css\";\n\nexport default function Button({onClick, title}) {\n\n    return (\n        <button className={styles.btn} type=\"button\" onClick={onClick}>\n            {title}\n        </button>\n    )\n}\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesGallery_list__aM+SO\",\"item\":\"MoviesGallery_item__rY1Lr\",\"name\":\"MoviesGallery_name__Jg+vi\"};","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { URL_IMG } from '../../services/moviesApi';\nimport { Link, useLocation } from 'react-router-dom';\nimport nophoto from \"../../imeges/nophoto.png\";\nimport styles from \"./MoviesGallery.module.css\";\n\nexport default function MoviesGallery({ moviesList }) {\n   const location = useLocation()\n   \n   return (\n      <ul className={styles.list} id=\"MoviesGallery\">\n         {moviesList.map(({ id, title, name, poster_path }) => (\n            <li className={styles.item} key={id} >\n               <Link to={`/movies/${id}`} state={{ from: location }} className=\"styles.link\">\n                  <img\n                     src={poster_path ? URL_IMG + poster_path : nophoto}\n                     alt={title || name} width=\"250px\"\n                  />\n                  <p className={styles.name}><b>{title || name}</b></p>\n               </Link>\n            </li>\n         ))}\n         </ul>\n         \n   );\n}\n\nMoviesGallery.propTypes = {\n   moviesList: PropTypes.arrayOf(\n      PropTypes.shape({\n         id: PropTypes.number.isRequired,\n         title: PropTypes.string,\n         name: PropTypes.string,\n         poster_path: PropTypes.string,\n      })\n   )\n}","// extracted by mini-css-extract-plugin\nexport default {\"Searchbar\":\"Searchbar_Searchbar__5WKzV\",\"SearchFormInput\":\"Searchbar_SearchFormInput__FT6Bx\"};","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport styles from \"../Searchbar/Searchbar.module.css\";\n\nexport default function Searchbar({ onSubmit }) {\n   const state = window.location.search.split('=')[1];\n   const [value, setValue] = useState('');\n\n   useEffect(() => {\n      if (state) {\n         setValue(state);\n         return;\n      }\n      setValue('');\n   }, [state]);\n\n   const onFormSubmit = e => {\n      e.preventDefault();\n      onSubmit(value);\n   };\n\n   return (\n      <div className={styles.Searchbar}>\n         <form className={styles.SearchForm} onSubmit={onFormSubmit}>\n            <input\n               className={styles.SearchFormInput}\n               type=\"text\"\n               autoComplete=\"off\"\n               autoFocus={true}\n               value={value}\n               onChange={e => setValue(e.target.value)}\n               placeholder=\"Search movies\"\n            />\n         </form>\n      </div>\n   );\n}\n\nSearchbar.propTypes = {\n   onSubmit: PropTypes.func.isRequired,\n};","import Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { fetchSearchMovie } from \"../../services/moviesApi\";\nimport Searchbar from \"../../components/Searchbar/Searchbar\";\nimport Loader from 'components/Loader/Loader';\nimport Button from 'components/Button/Button';\nimport MoviesGallery from \"../../components/MoviesGallery/MoviesGallery\";\n\nconst Movies = () => {\n   const history = useNavigate();\n   const location = useLocation();\n   const state = window.location.search.split('=')[1];\n   const [searchName, setSearchName] = useState(state ?? '');\n   const [countPage, setCountPage] = useState(1);\n   const [moviesList, setMoviesList] = useState([]);\n   const [showLoadMore, setShowLoadMore] = useState(false);\n   const [loading, setLoading] = useState(false);\n\n   useEffect(() => {\n      if (!state) {\n         setShowLoadMore(false);\n      }\n      setSearchName(state);\n      setCountPage(1);\n      setMoviesList([]);\n   }, [state]);\n\n   useEffect(() => {\n      if (!searchName) {\n         return;\n      }\n      setShowLoadMore(false);\n      setLoading(true);\n      fetchSearchMovie(searchName, countPage)\n      .then(date => {\n         setMoviesList(prev => {\n            const filterRes = date.results.filter(({ id }) => {\n               for (const movie of prev) {\n                  if (id === movie.id) {\n                     return false;\n                  }\n               }\n            return true;\n            });\n            return [...prev, ...filterRes];\n         });\n         setLoading(false);\n            if (date.total_results !== date.results.length) {\n               setShowLoadMore(true);\n            }\n            \n            if (countPage === 1) {\n               Notiflix.Notify.success(\n                  `Hooray! We found ${date.total_results} movies.`\n               );\n            }\n         \n            if (date.total_results <= countPage * 20) {\n               setShowLoadMore(false);\n               Notiflix.Notify.info(\n                  \"We're sorry, but you've reached the end of search results.\"\n               );\n            }\n      })\n      .catch(onApiError);\n      }, [countPage, searchName]);\n\n   const onApiError = () => {\n      Notiflix.Notify.failure(\n         'Sorry, there are no movies matching your search query. Please try again.'\n      );\n      setShowLoadMore(false);\n      setLoading(false);\n   };\n\n   const onSubmit = name => {\n      if (!name) {\n         Notiflix.Notify.failure('Please. Enter the name of the movie.');\n         setShowLoadMore(false);\n      }\n      if (searchName === name && countPage === 1) {\n         return;\n      }\n      history({ ...location, search: `query=${name}` });\n      setSearchName(name);\n      setCountPage(1);\n      setMoviesList([]);\n   };\n\n   const onloadeMore = () => {\n      setCountPage(prev => prev + 1);\n   };\n\n   return (\n      <div>\n         <Searchbar onSubmit={onSubmit} />\n         <MoviesGallery moviesList={moviesList} />\n         {loading && <Loader />}\n         {showLoadMore && <Button onClick={onloadeMore} title=\"Load more\" />}\n      </div>\n   );\n};\n\nexport default Movies;","const BASE_URL = 'https://api.themoviedb.org/3';\nconst MY_KEY = \"8b583155d58a646685ec9258b19767f3\";\n\nexport const URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending(page) {\n    return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${MY_KEY}&page=${page}`\n    );\n}\n\nexport function fetchMovieDetailsById(id) {\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${id}?api_key=${MY_KEY}`);\n}\n\nexport function fetchMovieCredits(id) {\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${id}/credits?api_key=${MY_KEY}&language=en-US`);\n}\n\nexport function fetchMovieReviews(id) {\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${id}/reviews?api_key=${MY_KEY}&language=en-US`);\n}\n\nexport function fetchSearchMovie(query, page = 1) {\n    return fetchWithErrorHandling(`${BASE_URL}/search/movie?api_key=${MY_KEY}&language=en-US&query=${query}&include_adult=false&page=${page}`);\n}"],"names":["Button","onClick","title","className","styles","type","MoviesGallery","moviesList","location","useLocation","id","map","name","poster_path","to","state","from","src","URL_IMG","nophoto","alt","width","Searchbar","onSubmit","window","search","split","useState","value","setValue","useEffect","e","preventDefault","autoComplete","autoFocus","onChange","target","placeholder","history","useNavigate","searchName","setSearchName","countPage","setCountPage","setMoviesList","showLoadMore","setShowLoadMore","loading","setLoading","fetchSearchMovie","then","date","prev","filterRes","results","filter","total_results","length","Notiflix","catch","onApiError","Loader","BASE_URL","MY_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","page","fetchMovieDetailsById","fetchMovieCredits","fetchMovieReviews","query"],"sourceRoot":""}